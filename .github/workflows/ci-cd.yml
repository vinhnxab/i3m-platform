name: I3M Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core-services: ${{ steps.changes.outputs.core-services }}
      erp-services: ${{ steps.changes.outputs.erp-services }}
      analytics-services: ${{ steps.changes.outputs.analytics-services }}
      content-services: ${{ steps.changes.outputs.content-services }}
      infrastructure-services: ${{ steps.changes.outputs.infrastructure-services }}
      marketplace-services: ${{ steps.changes.outputs.marketplace-services }}
      shared-services: ${{ steps.changes.outputs.shared-services }}
      industry-services: ${{ steps.changes.outputs.industry-services }}
      integration-services: ${{ steps.changes.outputs.integration-services }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            core-services:
              - 'core-services/**'
            erp-services:
              - 'erp-services/**'
            analytics-services:
              - 'analytics-services/**'
            content-services:
              - 'content-services/**'
            infrastructure-services:
              - 'infrastructure-services/**'
            marketplace-services:
              - 'marketplace-services/**'
            shared-services:
              - 'shared-services/**'
            industry-services:
              - 'industry-services/**'
            integration-services:
              - 'integration-services/**'

  test-and-build:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service-group: [
          core-services,
          erp-services, 
          analytics-services,
          content-services,
          infrastructure-services,
          marketplace-services,
          shared-services,
          industry-services,
          integration-services
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Services
        if: needs.detect-changes.outputs[matrix.service-group] == 'true'
        run: |
          echo "Testing ${{ matrix.service-group }}"
          # Run service-specific tests
          if [ -d "${{ matrix.service-group }}" ]; then
            for service in ${{ matrix.service-group }}/*/; do
              if [ -d "$service" ]; then
                echo "Testing $(basename $service)"
                # Add specific test commands here
                if [ -f "$service/package.json" ]; then
                  cd "$service"
                  npm install
                  npm test || echo "No tests found for $(basename $service)"
                  cd -
                elif [ -f "$service/requirements.txt" ]; then
                  cd "$service"
                  python -m pip install -r requirements.txt
                  python -m pytest tests/ || echo "No tests found for $(basename $service)"
                  cd -
                elif [ -f "$service/go.mod" ]; then
                  cd "$service"
                  go test ./... || echo "No tests found for $(basename $service)"
                  cd -
                elif [ -f "$service/pom.xml" ]; then
                  cd "$service"
                  mvn test || echo "No tests found for $(basename $service)"
                  cd -
                fi
              fi
            done
          fi

      - name: Build and Push Images
        if: needs.detect-changes.outputs[matrix.service-group] == 'true' && github.event_name == 'push'
        run: |
          echo "Building images for ${{ matrix.service-group }}"
          if [ -d "${{ matrix.service-group }}" ]; then
            for service in ${{ matrix.service-group }}/*/; do
              if [ -d "$service" ] && [ -f "$service/Dockerfile" ]; then
                service_name=$(basename $service)
                image_tag="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service-group }}-${service_name}:${{ github.sha }}"
                echo "Building $image_tag"
                
                docker build -t $image_tag "$service"
                docker push $image_tag
                
                # Also tag as latest for main branch
                if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                  latest_tag="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service-group }}-${service_name}:latest"
                  docker tag $image_tag $latest_tag
                  docker push $latest_tag
                fi
              fi
            done
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [detect-changes, test-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to EKS Staging
        run: |
          aws eks update-kubeconfig --region us-west-2 --name i3m-staging-cluster
          
          # Apply Kubernetes manifests
          kubectl apply -f devops/kubernetes/namespace.yml
          kubectl apply -f devops/kubernetes/configmaps/
          kubectl apply -f devops/kubernetes/secrets/
          kubectl apply -f devops/kubernetes/deployments/
          kubectl apply -f devops/kubernetes/services/
          kubectl apply -f devops/kubernetes/ingress/
          
          # Wait for deployments
          kubectl rollout status deployment --all -n i3m-staging --timeout=600s

  deploy-production:
    needs: [detect-changes, test-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to EKS Production
        run: |
          aws eks update-kubeconfig --region us-west-2 --name i3m-production-cluster
          
          # Apply Kubernetes manifests
          kubectl apply -f devops/kubernetes/namespace.yml
          kubectl apply -f devops/kubernetes/configmaps/
          kubectl apply -f devops/kubernetes/secrets/
          kubectl apply -f devops/kubernetes/deployments/
          kubectl apply -f devops/kubernetes/services/
          kubectl apply -f devops/kubernetes/ingress/
          
          # Wait for deployments
          kubectl rollout status deployment --all -n i3m-production --timeout=600s

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests"
          # Add smoke test commands here
          curl -f https://api.i3m-platform.com/health || exit 1

  notify:
    needs: [test-and-build, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
