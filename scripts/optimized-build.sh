#!/bin/bash

# Optimized Build Script
# Build v·ªõi multi-stage v√† t·ªëi ∆∞u h√≥a dung l∆∞·ª£ng

SERVICE_NAME=$1
SERVICE_PATH=$2
SERVICE_TYPE=${3:-"java"}  # java, nodejs, go

if [ -z "$SERVICE_NAME" ] || [ -z "$SERVICE_PATH" ]; then
    echo "‚ùå Usage: $0 <service-name> <service-path> [service-type]"
    echo "Example: $0 commerce-service erp-services/commerce-service java"
    echo "Service types: java, nodejs, go"
    exit 1
fi

echo "üöÄ Building $SERVICE_NAME ($SERVICE_TYPE) with optimizations..."

# 1. Pre-build cleanup (ch·ªâ x√≥a images c≈©)
echo "üßπ Pre-build cleanup..."
./scripts/image-cleanup.sh

# 2. Build v·ªõi t√πy ch·ªçn t·ªëi ∆∞u theo lo·∫°i service
cd "$SERVICE_PATH"

case $SERVICE_TYPE in
    "java")
        echo "‚òï Building Java service with Maven optimizations..."
        docker build \
            --no-cache \
            --rm \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --tag "$SERVICE_NAME:latest" \
            --tag "$SERVICE_NAME:$(date +%Y%m%d-%H%M%S)" \
            .
        ;;
    "nodejs")
        echo "üì¶ Building Node.js service with npm optimizations..."
        docker build \
            --no-cache \
            --rm \
            --build-arg NODE_ENV=production \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --tag "$SERVICE_NAME:latest" \
            --tag "$SERVICE_NAME:$(date +%Y%m%d-%H%M%S)" \
            .
        ;;
    "go")
        echo "üêπ Building Go service with CGO optimizations..."
        docker build \
            --no-cache \
            --rm \
            --build-arg CGO_ENABLED=0 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --tag "$SERVICE_NAME:latest" \
            --tag "$SERVICE_NAME:$(date +%Y%m%d-%H%M%S)" \
            .
        ;;
    *)
        echo "‚ùå Unknown service type: $SERVICE_TYPE"
        exit 1
        ;;
esac

BUILD_EXIT_CODE=$?

if [ $BUILD_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Build successful!"
    
    # 3. Post-build cleanup (ch·ªâ x√≥a images c≈©)
    echo "üßπ Post-build cleanup..."
    cd /home/vinhnx/i3m-platform
    ./scripts/image-cleanup.sh
    
    # 4. Load image v√†o Kind cluster
    echo "üì¶ Loading image into Kind cluster..."
    kind load docker-image "$SERVICE_NAME:latest" --name i3m-platform
    
    # 5. Hi·ªÉn th·ªã th√¥ng tin image
    echo "üìä Image information:"
    docker images "$SERVICE_NAME" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
    
    echo "üéâ Optimized build completed successfully!"
else
    echo "‚ùå Build failed with exit code $BUILD_EXIT_CODE"
    exit $BUILD_EXIT_CODE
fi
